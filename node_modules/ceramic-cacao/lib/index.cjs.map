{"version":3,"file":"index.cjs","sources":["../src/abnf.ts","../src/siwx/siwx.ts","../src/siwx/siwe.ts","../src/siwx/siws.ts","../src/cacao.ts"],"sourcesContent":["import apgApi from 'apg-js/src/apg-api/api.js'\nimport apgLib from 'apg-js/src/apg-lib/node-exports.js'\n\nconst GRAMMAR = `\nsign-in-with-ethereum =\n    domain %s\" wants you to sign in with your Ethereum account:\" LF\n    address LF\n    LF\n    [ statement LF ]\n    LF\n    %s\"URI: \" URI LF\n    %s\"Version: \" version LF\n    %s\"Chain ID: \" chain-id LF\n    %s\"Nonce: \" nonce LF\n    %s\"Issued At: \" issued-at\n    [ LF %s\"Expiration Time: \" expiration-time ]\n    [ LF %s\"Not Before: \" not-before ]\n    [ LF %s\"Request ID: \" request-id ]\n    [ LF %s\"Resources:\"\n    resources ]\n\ndomain = dnsauthority\n\naddress = \"0x\" 40*40HEXDIG\n    ; Must also conform to captilization\n    ; checksum encoding specified in EIP-55\n    ; where applicable (EOAs).\n\nstatement = *( reserved / unreserved / \" \" )\n    ; The purpose is to exclude LF (line breaks).\n\nversion = \"1\"\n\nnonce = 8*( ALPHA / DIGIT )\n\nissued-at = date-time\nexpiration-time = date-time\nnot-before = date-time\n\nrequest-id = *pchar\n\nchain-id = 1*DIGIT\n    ; See EIP-155 for valid CHAIN_IDs.\n\nresources = *( LF resource )\n\nresource = \"- \" URI\n\n; ------------------------------------------------------------------------------\n; RFC 3986\n\nURI           = scheme \":\" hier-part [ \"?\" query ] [ \"#\" fragment ]\n\nhier-part     = \"//\" authority path-abempty\n              / path-absolute\n              / path-rootless\n              / path-empty\n\nscheme        = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\n\nauthority     = [ userinfo \"@\" ] host [ \":\" port ]\nuserinfo      = *( unreserved / pct-encoded / sub-delims / \":\" )\nhost          = IP-literal / IPv4address / reg-name\nport          = *DIGIT\n\nIP-literal    = \"[\" ( IPv6address / IPvFuture  ) \"]\"\n\nIPvFuture     = \"v\" 1*HEXDIG \".\" 1*( unreserved / sub-delims / \":\" )\n\nIPv6address   =                            6( h16 \":\" ) ls32\n              /                       \"::\" 5( h16 \":\" ) ls32\n              / [               h16 ] \"::\" 4( h16 \":\" ) ls32\n              / [ *1( h16 \":\" ) h16 ] \"::\" 3( h16 \":\" ) ls32\n              / [ *2( h16 \":\" ) h16 ] \"::\" 2( h16 \":\" ) ls32\n              / [ *3( h16 \":\" ) h16 ] \"::\"    h16 \":\"   ls32\n              / [ *4( h16 \":\" ) h16 ] \"::\"              ls32\n              / [ *5( h16 \":\" ) h16 ] \"::\"              h16\n              / [ *6( h16 \":\" ) h16 ] \"::\"\n\nh16           = 1*4HEXDIG\nls32          = ( h16 \":\" h16 ) / IPv4address\nIPv4address   = dec-octet \".\" dec-octet \".\" dec-octet \".\" dec-octet\ndec-octet     = DIGIT                 ; 0-9\n                 / %x31-39 DIGIT         ; 10-99\n                 / \"1\" 2DIGIT            ; 100-199\n                 / \"2\" %x30-34 DIGIT     ; 200-249\n                 / \"25\" %x30-35          ; 250-255\n\nreg-name      = *( unreserved / pct-encoded / sub-delims )\n\npath-abempty  = *( \"/\" segment )\npath-absolute = \"/\" [ segment-nz *( \"/\" segment ) ]\npath-rootless = segment-nz *( \"/\" segment )\npath-empty    = 0pchar\n\nsegment       = *pchar\nsegment-nz    = 1*pchar\n\npchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n\nquery         = *( pchar / \"/\" / \"?\" )\n\nfragment      = *( pchar / \"/\" / \"?\" )\n\npct-encoded   = \"%\" HEXDIG HEXDIG\n\nunreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\nreserved      = gen-delims / sub-delims\ngen-delims    = \":\" / \"/\" / \"?\" / \"#\" / \"[\" / \"]\" / \"@\"\nsub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n              / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n\n; ------------------------------------------------------------------------------\n; RFC 4501\n\ndnsauthority    = host [ \":\" port ]\n                             ; See RFC 3986 for the\n                             ; definition of \"host\" and \"port\".\n\n; ------------------------------------------------------------------------------\n; RFC 3339\n\ndate-fullyear   = 4DIGIT\ndate-month      = 2DIGIT  ; 01-12\ndate-mday       = 2DIGIT  ; 01-28, 01-29, 01-30, 01-31 based on\n                          ; month/year\ntime-hour       = 2DIGIT  ; 00-23\ntime-minute     = 2DIGIT  ; 00-59\ntime-second     = 2DIGIT  ; 00-58, 00-59, 00-60 based on leap second\n                          ; rules\ntime-secfrac    = \".\" 1*DIGIT\ntime-numoffset  = (\"+\" / \"-\") time-hour \":\" time-minute\ntime-offset     = \"Z\" / time-numoffset\n\npartial-time    = time-hour \":\" time-minute \":\" time-second\n                  [time-secfrac]\nfull-date       = date-fullyear \"-\" date-month \"-\" date-mday\nfull-time       = partial-time time-offset\n\ndate-time       = full-date \"T\" full-time\n\n; ------------------------------------------------------------------------------\n; RFC 5234\n\nALPHA          =  %x41-5A / %x61-7A   ; A-Z / a-z\nLF             =  %x0A\n                  ; linefeed\nDIGIT          =  %x30-39\n                  ; 0-9\nHEXDIG         =  DIGIT / \"A\" / \"B\" / \"C\" / \"D\" / \"E\" / \"F\"\n`\n\nexport class ParsedMessage {\n  domain: string\n  address: string\n  statement: string\n  uri: string\n  version: string\n  nonce: string\n  issuedAt: string\n  expirationTime: string | null\n  notBefore: string | null\n  requestId: string | null\n  chainId: string | null\n  resources: Array<string> | null\n\n  constructor(msg: string) {\n    const api = new apgApi(GRAMMAR)\n    api.generate()\n    if (api.errors.length) {\n      console.error(api.errorsToAscii())\n      console.error(api.linesToAscii())\n      console.log(api.displayAttributeErrors())\n      throw new Error(`ABNF grammar has errors`)\n    }\n\n    const grammarObj = api.toObject()\n    const parser = new apgLib.parser()\n    parser.ast = new apgLib.ast()\n    const id = apgLib.ids\n\n    const domain = function (state, chars, phraseIndex, phraseLength, data) {\n      const ret = id.SEM_OK\n      if (state === id.SEM_PRE) {\n        data.domain = apgLib.utils.charsToString(chars, phraseIndex, phraseLength)\n      }\n      return ret\n    }\n    parser.ast.callbacks.domain = domain\n    const address = function (state, chars, phraseIndex, phraseLength, data) {\n      const ret = id.SEM_OK\n      if (state === id.SEM_PRE) {\n        data.address = apgLib.utils.charsToString(chars, phraseIndex, phraseLength)\n      }\n      return ret\n    }\n    parser.ast.callbacks.address = address\n    const statement = function (state, chars, phraseIndex, phraseLength, data) {\n      const ret = id.SEM_OK\n      if (state === id.SEM_PRE) {\n        data.statement = apgLib.utils.charsToString(chars, phraseIndex, phraseLength)\n      }\n      return ret\n    }\n    parser.ast.callbacks.statement = statement\n    const uri = function (state, chars, phraseIndex, phraseLength, data) {\n      const ret = id.SEM_OK\n      if (state === id.SEM_PRE) {\n        if (!data.uri) {\n          data.uri = apgLib.utils.charsToString(chars, phraseIndex, phraseLength)\n        }\n      }\n      return ret\n    }\n    parser.ast.callbacks.uri = uri\n    const version = function (state, chars, phraseIndex, phraseLength, data) {\n      const ret = id.SEM_OK\n      if (state === id.SEM_PRE) {\n        data.version = apgLib.utils.charsToString(chars, phraseIndex, phraseLength)\n      }\n      return ret\n    }\n    parser.ast.callbacks.version = version\n    const chainId = function (state, chars, phraseIndex, phraseLength, data) {\n      const ret = id.SEM_OK\n      if (state === id.SEM_PRE) {\n        data.chainId = apgLib.utils.charsToString(chars, phraseIndex, phraseLength)\n      }\n      return ret\n    }\n    parser.ast.callbacks['chain-id'] = chainId\n    const nonce = function (state, chars, phraseIndex, phraseLength, data) {\n      const ret = id.SEM_OK\n      if (state === id.SEM_PRE) {\n        data.nonce = apgLib.utils.charsToString(chars, phraseIndex, phraseLength)\n      }\n      return ret\n    }\n    parser.ast.callbacks.nonce = nonce\n    const issuedAt = function (state, chars, phraseIndex, phraseLength, data) {\n      const ret = id.SEM_OK\n      if (state === id.SEM_PRE) {\n        data.issuedAt = apgLib.utils.charsToString(chars, phraseIndex, phraseLength)\n      }\n      return ret\n    }\n    parser.ast.callbacks['issued-at'] = issuedAt\n    const expirationTime = function (state, chars, phraseIndex, phraseLength, data) {\n      const ret = id.SEM_OK\n      if (state === id.SEM_PRE) {\n        data.expirationTime = apgLib.utils.charsToString(chars, phraseIndex, phraseLength)\n      }\n      return ret\n    }\n    parser.ast.callbacks['expiration-time'] = expirationTime\n    const notBefore = function (state, chars, phraseIndex, phraseLength, data) {\n      const ret = id.SEM_OK\n      if (state === id.SEM_PRE) {\n        data.notBefore = apgLib.utils.charsToString(chars, phraseIndex, phraseLength)\n      }\n      return ret\n    }\n    parser.ast.callbacks['not-before'] = notBefore\n    const requestId = function (state, chars, phraseIndex, phraseLength, data) {\n      const ret = id.SEM_OK\n      if (state === id.SEM_PRE) {\n        data.requestId = apgLib.utils.charsToString(chars, phraseIndex, phraseLength)\n      }\n      return ret\n    }\n    parser.ast.callbacks['request-id'] = requestId\n    const resources = function (state, chars, phraseIndex, phraseLength, data) {\n      const ret = id.SEM_OK\n      if (state === id.SEM_PRE) {\n        data.resources = apgLib.utils\n          .charsToString(chars, phraseIndex, phraseLength)\n          .slice(3)\n          .split('\\n- ')\n      }\n      return ret\n    }\n    parser.ast.callbacks.resources = resources\n\n    const result = parser.parse(grammarObj, 'sign-in-with-ethereum', msg)\n    if (!result.success) {\n      throw new Error(`Invalid message: ${JSON.stringify(result)}`)\n    }\n    const elements = {}\n    parser.ast.translate(elements)\n    for (const [key, value] of Object.entries(elements)) {\n      this[key] = value\n    }\n  }\n}\n","import type { Cacao } from '../cacao.js'\nimport { ParsedMessage as ABNFParsedMessage } from '../abnf.js'\nimport { AccountId, ChainId } from 'caip'\n\n/**\n * Possible message error types.\n */\nexport enum ErrorTypes {\n  /**Thrown when the `validate()` function can verify the message. */\n  INVALID_SIGNATURE = 'Invalid signature.',\n  /**Thrown when the `expirationTime` is present and in the past. */\n  EXPIRED_MESSAGE = 'Expired message.',\n  /**Thrown when some required field is missing. */\n  MALFORMED_SESSION = 'Malformed session.',\n}\n\n/**\n * Possible signature types that this library supports.\n */\nexport enum SignatureType {\n  /**EIP-191 signature scheme */\n  PERSONAL_SIGNATURE = 'Personal signature',\n}\n\nexport class SiwxMessage {\n  /**RFC 4501 dns authority that is requesting the signing. */\n  domain: string\n  /**Ethereum address performing the signing conformant to capitalization\n   * encoded checksum specified in EIP-55 where applicable. */\n  address: string\n  /**Human-readable ASCII assertion that the user will sign, and it must not\n   * contain `\\n`. */\n  statement?: string = undefined\n  /**RFC 3986 URI referring to the resource that is the subject of the signing\n   *  (as in the __subject__ of a claim). */\n  uri: string\n  /**Current version of the message. */\n  version: string\n  /**Randomized token used to prevent replay attacks, at least 8 alphanumeric\n   * characters. */\n  nonce?: string = undefined\n  /**ISO 8601 datetime string of the current time. */\n  issuedAt?: string = undefined\n  /**ISO 8601 datetime string that, if present, indicates when the signed\n   * authentication message is no longer valid. */\n  expirationTime?: string = undefined\n  /**ISO 8601 datetime string that, if present, indicates when the signed\n   * authentication message will become valid. */\n  notBefore?: string = undefined\n  /**System-specific identifier that may be used to uniquely refer to the\n   * sign-in request. */\n  requestId?: string = undefined\n  /**EIP-155 Chain ID to which the session is bound, and the network where\n   * Contract Accounts must be resolved. */\n  chainId: string\n  /**List of information or references to information the user wishes to have\n   * resolved as part of authentication by the relying party. They are\n   * expressed as RFC 3986 URIs separated by `\\n- `. */\n  resources?: Array<string> = undefined\n  /**Signature of the message signed by the wallet. */\n  signature?: string = undefined\n  /**Type of sign message to be generated. */\n  type?: SignatureType\n\n  constructor(param: string | Partial<SiwxMessage>) {\n    if (typeof param === 'string') {\n      const parsedMessage = new ABNFParsedMessage(param)\n      this.domain = parsedMessage.domain\n      this.address = parsedMessage.address\n      this.statement = parsedMessage.statement\n      this.uri = parsedMessage.uri\n      this.version = parsedMessage.version\n      this.nonce = parsedMessage.nonce\n      this.issuedAt = parsedMessage.issuedAt\n      this.expirationTime = parsedMessage.expirationTime\n      this.notBefore = parsedMessage.notBefore\n      this.requestId = parsedMessage.requestId\n      this.chainId = parsedMessage.chainId\n      this.resources = parsedMessage.resources\n    } else {\n      Object.assign(this, param)\n    }\n  }\n\n  static fromCacao<T extends SiwxMessage>(this: new (...args: Array<any>) => T, cacao: Cacao): T {\n    const account = AccountId.parse(cacao.p.iss.replace('did:pkh:', ''))\n    const siwx = new this({\n      domain: cacao.p.domain,\n      address: account.address,\n      uri: cacao.p.aud,\n      version: cacao.p.version,\n      chainId: new ChainId(account.chainId).reference,\n    })\n\n    if (cacao.p.statement) siwx.statement = cacao.p.statement\n    if (cacao.p.nonce) siwx.nonce = cacao.p.nonce\n    if (cacao.p.iat) siwx.issuedAt = cacao.p.iat\n    if (cacao.p.exp) siwx.expirationTime = cacao.p.exp\n    if (cacao.p.nbf) siwx.notBefore = cacao.p.nbf\n    if (cacao.p.requestId) siwx.requestId = cacao.p.requestId\n    if (cacao.p.resources) siwx.resources = cacao.p.resources\n\n    if (cacao.s) {\n      if (cacao.s.s) siwx.signature = cacao.s.s\n      if (cacao.s.t === 'eip191') siwx.type = SignatureType.PERSONAL_SIGNATURE\n    }\n\n    return siwx\n  }\n\n  toMessage(chain: string): string {\n    return asString(this, chain)\n  }\n}\n\nexport function asLegacyChainIdString(message: SiwxMessage, chainName: string): string {\n  const header = `${message.domain} wants you to sign in with your ${chainName} account:`\n  const uriField = `URI: ${message.uri}`\n  let prefix = [header, message.address].join('\\n')\n  const versionField = `Version: ${message.version}`\n\n  if (!message.nonce) {\n    message.nonce = (Math.random() + 1).toString(36).substring(4)\n  }\n\n  const nonceField = `Nonce: ${message.nonce}`\n\n  const suffixArray = [uriField, versionField, nonceField]\n\n  if (message.issuedAt) {\n    Date.parse(message.issuedAt)\n  }\n  message.issuedAt = message.issuedAt ? message.issuedAt : new Date().toISOString()\n  suffixArray.push(`Issued At: ${message.issuedAt}`)\n\n  if (message.expirationTime) {\n    const expiryField = `Expiration Time: ${message.expirationTime}`\n\n    suffixArray.push(expiryField)\n  }\n\n  if (message.notBefore) {\n    suffixArray.push(`Not Before: ${message.notBefore}`)\n  }\n\n  if (message.requestId) {\n    suffixArray.push(`Request ID: ${message.requestId}`)\n  }\n\n  if (message.chainId) {\n    suffixArray.push(`Chain ID: ${message.chainId}`)\n  }\n\n  if (message.resources) {\n    suffixArray.push([`Resources:`, ...message.resources.map((x) => `- ${x}`)].join('\\n'))\n  }\n\n  const suffix = suffixArray.join('\\n')\n\n  if (message.statement) {\n    prefix = [prefix, message.statement].join('\\n\\n')\n  }\n\n  return [prefix, suffix].join('\\n\\n')\n}\n\nexport function asString(message: SiwxMessage, chainName: string): string {\n  const header = `${message.domain} wants you to sign in with your ${chainName} account:`\n  const uriField = `URI: ${message.uri}`\n  let prefix = [header, message.address].join('\\n')\n  const versionField = `Version: ${message.version}`\n\n  if (!message.nonce) {\n    message.nonce = (Math.random() + 1).toString(36).substring(4)\n  }\n\n  const nonceField = `Nonce: ${message.nonce}`\n  const chainIdField = `Chain ID: ${message.chainId}`\n\n  const suffixArray = [uriField, versionField, chainIdField, nonceField]\n\n  if (message.issuedAt) {\n    Date.parse(message.issuedAt)\n  }\n  message.issuedAt = message.issuedAt ? message.issuedAt : new Date().toISOString()\n  suffixArray.push(`Issued At: ${message.issuedAt}`)\n\n  if (message.expirationTime) {\n    const expiryField = `Expiration Time: ${message.expirationTime}`\n\n    suffixArray.push(expiryField)\n  }\n\n  if (message.notBefore) {\n    suffixArray.push(`Not Before: ${message.notBefore}`)\n  }\n\n  if (message.requestId) {\n    suffixArray.push(`Request ID: ${message.requestId}`)\n  }\n\n  if (message.resources && message.resources.length >= 1) {\n    suffixArray.push([`Resources:`, ...message.resources.map((x) => `- ${x}`)].join('\\n'))\n  }\n\n  const suffix = suffixArray.join('\\n')\n\n  if (message.statement) {\n    prefix = [prefix, message.statement].join('\\n\\n')\n  }\n\n  return [prefix, suffix].join('\\n\\n')\n}\n","import { SignatureType, SiwxMessage } from './siwx.js'\n\nexport class SiweMessage extends SiwxMessage {\n  /**\n   * This function can be used to retrieve an EIP-4361 formated message for\n   * signature, although you can call it directly it's advised to use\n   * [signMessage()] instead which will resolve to the correct method based\n   * on the [type] attribute of this object, in case of other formats being\n   * implemented.\n   * @returns {string} EIP-4361 formated message, ready for EIP-191 signing.\n   */\n  toMessage(): string {\n    return super.toMessage('Ethereum')\n  }\n\n  /**\n   * This method parses all the fields in the object and creates a sign\n   * message according with the type defined.\n   * @returns {string} Returns a message ready to be signed according with the\n   * type defined in the object.\n   */\n  signMessage(): string {\n    let message: string\n    switch (this.type) {\n      case SignatureType.PERSONAL_SIGNATURE: {\n        message = this.toMessage()\n        break\n      }\n\n      default: {\n        message = this.toMessage()\n        break\n      }\n    }\n    return message\n  }\n}\n","import { SignatureType, SiwxMessage } from './siwx.js'\n\nexport class SiwsMessage extends SiwxMessage {\n  toMessage(): string {\n    return super.toMessage('Solana')\n  }\n\n  signMessage(): Uint8Array {\n    let message: Uint8Array\n    switch (this.type) {\n      case SignatureType.PERSONAL_SIGNATURE: {\n        message = new TextEncoder().encode(this.toMessage())\n        break\n      }\n\n      default: {\n        message = new TextEncoder().encode(this.toMessage())\n        break\n      }\n    }\n\n    return message\n  }\n}\n","import { verifyMessage } from '@ethersproject/wallet'\nimport * as dagCbor from '@ipld/dag-cbor'\nimport { verify } from '@stablelib/ed25519'\nimport { AccountId } from 'caip'\nimport * as multiformats from 'multiformats'\nimport * as Block from 'multiformats/block'\nimport { sha256 as hasher } from 'multiformats/hashes/sha2'\nimport { fromString as u8aFromString } from 'uint8arrays/from-string'\nimport { SiweMessage } from './siwx/siwe.js'\nimport { SiwsMessage } from './siwx/siws.js'\nimport { asLegacyChainIdString } from './siwx/siwx.js'\n\n// 5 minute default clockskew\nconst CLOCK_SKEW_DEFAULT_SEC = 5 * 60\n\n// CACAOs issued after that day must be of new format\nexport const LEGACY_CHAIN_ID_REORG_DATE = new Date('2022-09-20').valueOf()\n\nexport type Header = {\n  t: 'eip4361' | 'caip122'\n}\n\nexport type Payload = {\n  domain: string\n  iss: string\n  aud: string\n  version: string\n  nonce: string\n  iat: string\n  nbf?: string\n  exp?: string\n  statement?: string\n  requestId?: string\n  resources?: Array<string>\n}\n\nexport type Signature = {\n  t: 'eip191' | 'eip1271' | 'solana:ed25519'\n  s: string\n}\nexport type Cacao = {\n  h: Header\n  p: Payload\n  s?: Signature\n}\n\nexport type VerifyOptions = {\n  /**\n   * @param atTime - the point in time the capability is being verified for\n   */\n  atTime?: Date\n  /**\n   * @param expPhaseOutSecs - Number of seconds that a capability stays valid for after it was expired\n   */\n  revocationPhaseOutSecs?: number\n  /**\n   * @param clockSkewSecs - Number of seconds of clock tolerance when verifying iat, nbf, and exp\n   */\n  clockSkewSecs?: number\n\n  /**\n   * @param disableExpirationCheck - Do not verify expiration time\n   */\n  disableExpirationCheck?: boolean\n}\n\nexport namespace Cacao {\n  export function fromSiweMessage(siweMessage: SiweMessage): Cacao {\n    const cacao: Cacao = {\n      h: {\n        t: 'eip4361', // TODO: Replace with \"caip122\" after 2022-09-24\n      },\n      p: {\n        domain: siweMessage.domain,\n        iat: siweMessage.issuedAt,\n        iss: `did:pkh:eip155:${siweMessage.chainId}:${siweMessage.address}`,\n        aud: siweMessage.uri,\n        version: siweMessage.version,\n        nonce: siweMessage.nonce,\n      },\n    }\n\n    if (siweMessage.signature) {\n      cacao.s = {\n        t: 'eip191',\n        s: siweMessage.signature,\n      }\n    }\n\n    if (siweMessage.notBefore) {\n      cacao.p.nbf = siweMessage.notBefore\n    }\n\n    if (siweMessage.expirationTime) {\n      cacao.p.exp = siweMessage.expirationTime\n    }\n\n    if (siweMessage.statement) {\n      cacao.p.statement = siweMessage.statement\n    }\n\n    if (siweMessage.requestId) {\n      cacao.p.requestId = siweMessage.requestId\n    }\n\n    if (siweMessage.resources) {\n      cacao.p.resources = siweMessage.resources\n    }\n\n    return cacao\n  }\n\n  export function fromSiwsMessage(siwsMessage: SiwsMessage): Cacao {\n    const cacao: Cacao = {\n      h: {\n        t: 'caip122',\n      },\n      p: {\n        domain: siwsMessage.domain,\n        iat: siwsMessage.issuedAt,\n        iss: `did:pkh:solana:${siwsMessage.chainId}:${siwsMessage.address}`,\n        aud: siwsMessage.uri,\n        version: siwsMessage.version,\n        nonce: siwsMessage.nonce,\n      },\n    }\n\n    if (siwsMessage.signature) {\n      cacao.s = {\n        // https://github.com/solana-labs/wallet-adapter/issues/179\n        t: 'solana:ed25519',\n        s: siwsMessage.signature,\n      }\n    }\n\n    if (siwsMessage.notBefore) {\n      cacao.p.nbf = siwsMessage.notBefore\n    }\n\n    if (siwsMessage.expirationTime) {\n      cacao.p.exp = siwsMessage.expirationTime\n    }\n\n    if (siwsMessage.statement) {\n      cacao.p.statement = siwsMessage.statement\n    }\n\n    if (siwsMessage.requestId) {\n      cacao.p.requestId = siwsMessage.requestId\n    }\n\n    if (siwsMessage.resources) {\n      cacao.p.resources = siwsMessage.resources\n    }\n\n    return cacao\n  }\n\n  export async function fromBlockBytes(bytes: Uint8Array): Promise<Cacao> {\n    const block = await Block.decode({ bytes: bytes, codec: dagCbor, hasher: hasher })\n    return block.value as Cacao\n  }\n\n  export function verify(cacao: Cacao, options: VerifyOptions = {}): void {\n    if (cacao.s?.t === 'eip191') {\n      return verifyEIP191Signature(cacao, options)\n    } else if (cacao.s?.t === 'solana:ed25519') {\n      return verifySolanaSignature(cacao, options)\n    }\n    throw new Error('Unsupported CACAO signature type')\n  }\n\n  export function verifyEIP191Signature(cacao: Cacao, options: VerifyOptions) {\n    if (!cacao.s) {\n      throw new Error(`CACAO does not have a signature`)\n    }\n\n    const atTime = options.atTime ? options.atTime.getTime() : Date.now()\n    const clockSkew = (options.clockSkewSecs ?? CLOCK_SKEW_DEFAULT_SEC) * 1000\n\n    if (\n      Date.parse(cacao.p.iat) > atTime + clockSkew ||\n      Date.parse(cacao.p.nbf) > atTime + clockSkew\n    ) {\n      throw new Error(`CACAO is not valid yet`)\n    }\n\n    const phaseOutMS = options.revocationPhaseOutSecs ? options.revocationPhaseOutSecs * 1000 : 0\n\n    if (\n      !options.disableExpirationCheck &&\n      Date.parse(cacao.p.exp) + phaseOutMS + clockSkew < atTime\n    ) {\n      throw new Error(`CACAO has expired`)\n    }\n\n    const recoveredAddress = verifyMessage(\n      SiweMessage.fromCacao(cacao).toMessage(),\n      cacao.s.s\n    ).toLowerCase()\n    const recoveredAddresses = [recoveredAddress]\n\n    if (Date.parse(cacao.p.iat) <= LEGACY_CHAIN_ID_REORG_DATE) {\n      const legacyChainIdRecoveredAddress = verifyMessage(\n        asLegacyChainIdString(SiweMessage.fromCacao(cacao), 'Ethereum'),\n        cacao.s.s\n      ).toLowerCase()\n      recoveredAddresses.push(legacyChainIdRecoveredAddress)\n    }\n\n    const issuerAddress = AccountId.parse(cacao.p.iss.replace('did:pkh:', '')).address.toLowerCase()\n    if (!recoveredAddresses.includes(issuerAddress)) {\n      throw new Error(`Signature does not belong to issuer`)\n    }\n  }\n}\n\nexport function verifySolanaSignature(cacao: Cacao, options: VerifyOptions) {\n  if (!cacao.s) {\n    throw new Error(`CACAO does not have a signature`)\n  }\n  const atTime = options.atTime ? options.atTime.getTime() : Date.now()\n\n  if (Date.parse(cacao.p.iat) > atTime || Date.parse(cacao.p.nbf) > atTime) {\n    throw new Error(`CACAO is not valid yet`)\n  }\n\n  const phaseOutMS = options.revocationPhaseOutSecs ? options.revocationPhaseOutSecs * 1000 : 0\n\n  if (!options.disableExpirationCheck && Date.parse(cacao.p.exp) + phaseOutMS < atTime) {\n    throw new Error(`CACAO has expired`)\n  }\n\n  const msg = SiwsMessage.fromCacao(cacao)\n  const sig = cacao.s.s\n\n  const messageU8 = msg.signMessage()\n  const sigU8 = u8aFromString(sig, 'base58btc')\n  const issAddress = AccountId.parse(cacao.p.iss.replace('did:pkh:', '')).address\n  const pubKeyU8 = u8aFromString(issAddress, 'base58btc')\n\n  if (!verify(pubKeyU8, messageU8, sigU8)) {\n    throw new Error(`Signature does not belong to issuer`)\n  }\n}\n\nexport type CacaoBlock = {\n  value: Cacao\n  cid: multiformats.CID\n  bytes: Uint8Array\n}\n\nexport namespace CacaoBlock {\n  export function fromCacao(cacao: Cacao): Promise<CacaoBlock> {\n    return Block.encode<Cacao, number, number>({\n      value: cacao,\n      codec: dagCbor,\n      hasher: hasher,\n    })\n  }\n}\n"],"names":["GRAMMAR","ParsedMessage","constructor","msg","domain","address","statement","uri","version","nonce","issuedAt","expirationTime","notBefore","requestId","chainId","resources","api","apgApi","generate","errors","length","console","error","errorsToAscii","linesToAscii","log","displayAttributeErrors","Error","grammarObj","toObject","parser","apgLib","ast","id","ids","state","chars","phraseIndex","phraseLength","data","ret","SEM_OK","SEM_PRE","utils","charsToString","callbacks","slice","split","result","parse","success","JSON","stringify","elements","translate","key","value","Object","entries","ErrorTypes","SignatureType","SiwxMessage","param","undefined","signature","type","parsedMessage","ABNFParsedMessage","assign","fromCacao","cacao","account","AccountId","p","iss","replace","siwx","aud","ChainId","reference","iat","exp","nbf","s","t","PERSONAL_SIGNATURE","toMessage","chain","asString","asLegacyChainIdString","message","chainName","header","uriField","prefix","join","versionField","Math","random","toString","substring","nonceField","suffixArray","Date","toISOString","push","expiryField","map","x","suffix","chainIdField","SiweMessage","signMessage","SiwsMessage","TextEncoder","encode","CLOCK_SKEW_DEFAULT_SEC","LEGACY_CHAIN_ID_REORG_DATE","valueOf","Cacao","fromSiweMessage","siweMessage","h","fromBlockBytes","bytes","Block","decode","codec","dagCbor","hasher","block","fromSiwsMessage","siwsMessage","verify","options","verifyEIP191Signature","verifySolanaSignature","atTime","getTime","now","clockSkew","clockSkewSecs","phaseOutMS","revocationPhaseOutSecs","disableExpirationCheck","recoveredAddress","verifyMessage","toLowerCase","recoveredAddresses","legacyChainIdRecoveredAddress","issuerAddress","includes","sig","messageU8","sigU8","u8aFromString","issAddress","pubKeyU8","CacaoBlock"],"mappings":"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"}